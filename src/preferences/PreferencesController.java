package preferences;

import java.awt.BorderLayout;
import java.awt.GridLayout;
import java.awt.event.*;
import java.util.ArrayList;

import javax.swing.*;


/**
 * An instance of this class acts as a controller between a application preferences model and view. 
 * Also coordinates persistent storage of preferences.
 */
public class PreferencesController extends WindowAdapter implements ActionListener {
    private volatile ApplicationPreferencesModel model;
    private IPreferencesPersistence persistence;
    private PreferencesDialog preferencesDialog;
    private DataProviderPreferencesPanel dataProviderPreferencesView;
    private JButton editOkButton;
    private final String editOkButtonCommand = "dataProviderEditConfirmButton";
    
    /**
     * Constructs new preferences controller. And hands it references to model, view
     * and persistence provider classes.
     *
     * @param model the application preferences model
     * @param preferencesDialog the preferences dialog (the view)
     * @param persistence the persistence provider class
     */
    public PreferencesController(ApplicationPreferencesModel model, PreferencesDialog preferencesDialog, IPreferencesPersistence persistence) {
        this.model = model;
        this.persistence = persistence;
        this.preferencesDialog = preferencesDialog;
        this.dataProviderPreferencesView = preferencesDialog.getDataProviderPreferencesPanel();
        
        // add controller to preferences panels 
        preferencesDialog.addController(this);
        dataProviderPreferencesView.addController(this);
    }


    /**
     * Handles events generated by the user clicking on the "Add", "Delete", "Edit"
     * "To Top", "Save and Close" and "Cancel" buttons in the preferences Dialog.
     *
     */
    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getActionCommand().equals("Add")) {
            createAndShowAddDataProviderDialog();
        } else if (e.getActionCommand().equals("Delete")) {
            deleteDataProvider();
        } else if (e.getActionCommand().equals("Edit")) {
            createAndShowEditDataProviderDialog();
        } else if (e.getActionCommand().equals("To Top")) {
            sendDataProviderToTop();
        } else if (e.getActionCommand().equals("Preferences.saveAndClose")) {
            saveAndClose();
        } else if (e.getActionCommand().equals("Preferences.cancel")) {
            restorePreferencesAndCloseDialog();
        }
    }
    
    /**
     * This method handles a window closing event on the preferences dialog by
     * discarding changes and closing the dialog.
     *
     */
    @Override
    public void windowClosing(WindowEvent e) {
        restorePreferencesAndCloseDialog();
//        model.printDataProviderList();
    }

    private void restorePreferencesAndCloseDialog() {
        // undoes changes by restoring preferences from disk and closes the dialog
        // model = persistence.loadApplicationPreferences();  // This does not work because other objects still have the old reference 
        ApplicationPreferencesModel restoredModel = persistence.loadApplicationPreferences();
        ArrayList<DataProvider> restoredDataProviderList = restoredModel.getDataProviderList();
        model.setDataProviderList(restoredDataProviderList);
        
        dataProviderPreferencesView.refreshTable();
        preferencesDialog.dispose();
    }


    /**
     * Sends the selected data provider to the top of the list and thereby activates it,
     * since the data provider at the top of the list is always active.
     */
    public void sendDataProviderToTop() {
        // Moves selected DataProvider to top of list. Whichever is on top is active.
        model.setDataProviderActive(dataProviderPreferencesView.getSelectedTableRow());
        dataProviderPreferencesView.refreshTable();
    }


    private void createAndShowEditDataProviderDialog() {
        // Create edit dialog
        JDialog editDialog = new JDialog(preferencesDialog, "Edit", true);
        editDialog.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
        JPanel contentPanel = new JPanel(new GridLayout(5, 2));
        // Labels and text fields with values of selected data provider
        JTextField nameTextField = new JTextField(model.getDataProviderListItem(dataProviderPreferencesView.getSelectedTableRow()).getName(), 30);
        JTextField apiKeyTextField = new JTextField(model.getDataProviderListItem(dataProviderPreferencesView.getSelectedTableRow()).getApiKey(), 30);
        JTextField pullUrlTextField = new JTextField(model.getDataProviderListItem(dataProviderPreferencesView.getSelectedTableRow()).getPullUrl(), 30);
        JTextField pushUrlTextField = new JTextField(model.getDataProviderListItem(dataProviderPreferencesView.getSelectedTableRow()).getPushUrl(), 30);
        
        
        contentPanel.add(new JLabel("Name: "));
        contentPanel.add(nameTextField);
        contentPanel.add(new JLabel("API Key: "));
        contentPanel.add(apiKeyTextField);
        contentPanel.add(new JLabel("Pull URL: "));
        contentPanel.add(pullUrlTextField);
        contentPanel.add(new JLabel("Push URL: "));
        contentPanel.add(pushUrlTextField);
        editOkButton = new JButton("OK");
        editOkButton.setActionCommand(editOkButtonCommand);
        editOkButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                DataProvider dataProviederToEdit = model.getDataProviderListItem(dataProviderPreferencesView.getSelectedTableRow());
                dataProviederToEdit.setName(nameTextField.getText());
                dataProviederToEdit.setApiKey(apiKeyTextField.getText());
                dataProviederToEdit.setPullUrl(pullUrlTextField.getText());
                dataProviederToEdit.setPushUrl(pushUrlTextField.getText());
                dataProviderPreferencesView.refreshTable();
                editDialog.dispose();
            }
        });
        contentPanel.add(editOkButton);
        
        JButton cancelButton = new JButton("Cancel");
        cancelButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                editDialog.dispose();
            }
        });
        contentPanel.add(cancelButton);
        
        editDialog.add(contentPanel, BorderLayout.CENTER);
        editDialog.pack();
        editDialog.setLocationRelativeTo(preferencesDialog);
        editDialog.setVisible(true);
    }
    


    private void createAndShowAddDataProviderDialog() {
        // Create add dialog
        JDialog editDialog = new JDialog(preferencesDialog, "Add", true);
        editDialog.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
        JPanel contentPanel = new JPanel(new GridLayout(5, 2));
        // Labels and text fields
        JTextField nameTextField = new JTextField(30);
        JTextField apiKeyTextField = new JTextField(30);
        JTextField pullUrlTextField = new JTextField(30);
        JTextField pushUrlTextField = new JTextField(30);
        contentPanel.add(new JLabel("Name: "));
        contentPanel.add(nameTextField);
        contentPanel.add(new JLabel("API Key: "));
        contentPanel.add(apiKeyTextField);
        contentPanel.add(new JLabel("Pull URL: "));
        contentPanel.add(pullUrlTextField);
        contentPanel.add(new JLabel("Push URL: "));
        contentPanel.add(pushUrlTextField);
        // OK Button
        JButton okButton = new JButton("OK") ;
        okButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
              // Construct DataProvider dataItem to pass to model
                DataProvider newDataProvider = new DataProvider(nameTextField.getText(), apiKeyTextField.getText(), pullUrlTextField.getText(), pushUrlTextField.getText());
                model.addDataProvider(newDataProvider);
                dataProviderPreferencesView.refreshTable();
                editDialog.dispose();
            }
        });
        contentPanel.add(okButton);
        
        // Cancel Button
        JButton cancelButton = new JButton("Cancel");
        cancelButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                editDialog.dispose();
            }
        });
        contentPanel.add(cancelButton);
        
        editDialog.add(contentPanel, BorderLayout.CENTER);
        editDialog.pack();
        editDialog.setLocationRelativeTo(preferencesDialog);
        editDialog.setVisible(true);
        
    }

    private void deleteDataProvider() {
        int rowIndexToDelete = dataProviderPreferencesView.getSelectedTableRow();
        if (rowIndexToDelete != -1) {
            model.removeDataProviderListItem(rowIndexToDelete);
        }
        dataProviderPreferencesView.clearTableSelection();   // Needed so that edit and delete buttons get disabled again after item removal
        dataProviderPreferencesView.refreshTable();
    }

    private void saveAndClose() {
        persistence.storeApplicationPreferences(model);
        preferencesDialog.dispose();
    }
    
}

